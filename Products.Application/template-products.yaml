AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application.
Parameters:
  SecurityGroupId:
    Default: sg-02dbdd82f513a7733
    Type: 'AWS::EC2::SecurityGroup::Id'
  SubNetId1:
    Default: subnet-037e8b801c1e77db5
    Type: 'AWS::EC2::Subnet::Id'
  SubNetId2:
    Default: subnet-0309164262b4dd853
    Type: 'AWS::EC2::Subnet::Id'
  EnvironmentType:
    Description: The environment type
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - uat
      - prod
    ConstraintDescription: 'Must be dev, uat or prod'
Mappings:
  EnvironmentVariablesMap:
    Function.Properties.CodeUri.Bucket:
      dev: vanlune-bin-dev
      uat: vanlune-bin-uat
      prod: vanlune-bin-prod
    Function.Properties.Products.Bucket:
      dev: vanlune-database
      uat: vanlune-database
      prod: vanlune-database
    Stage.ApiGateway:
      dev: Dev
      uat: Uat
      prod: Prod
    DbSecretName: 
      dev: db-dev
      uat: db-dev
      prod: db-dev
Resources:
 # API Functinos
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth: 
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers: 
          LambdaAuth: 
            FunctionArn: arn:aws:lambda:us-east-1:277944362602:function:vanlune-auth
            FunctionPayloadType: TOKEN
            Type: Lambda
            Identity:
              Header: AuthorizationToken
              ReauthorizeEvery: 0
        DefaultAuthorizer: LambdaAuth
      StageName: !FindInMap 
        - EnvironmentVariablesMap
        - Stage.ApiGateway
        - !Ref EnvironmentType
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
  GatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: MISSING_AUTHENTICATION_TOKEN
      RestApiId: !Ref ApiGatewayApi
      StatusCode: '404'
  GatewayNotAuthResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref ApiGatewayApi
      StatusCode: '401'
  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref ApiGatewayApi
  GatewayResponseDefault5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref ApiGatewayApi
  AuthPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: arn:aws:lambda:us-east-1:277944362602:function:vanlune-auth
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/authorizers/CustomAuth"
  CreateProduct:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-product-create
      Handler: >-
        Products.Application::Products.Application.Function::CreateProducts
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products'
            Method: post        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  UpdatProduct:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-product-update
      Handler: >-
        Products.Application::Products.Application.Function::UpdateProducts
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products'
            Method: put        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  UploadImages:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-product-upload-image
      Handler: >-
        Products.Application::Products.Application.Function::UploadImages
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/upload'
            Method: post        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          BUCKET_IMAGES: 'vanlune-site-images'
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  DeleteProduct:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-product-delete-all
      Handler: >-
        Products.Application::Products.Application.Function::DeleteProducts
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products'
            Method: delete
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetProductsByFilters:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-product-get-by-filters
      Handler: >-
        Products.Application::Products.Application.Function::GetProductsByFilters
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/filters'
            Method: get
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetProductById:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-product-get-by-id
      Handler: >-
        Products.Application::Products.Application.Function::GetProductById
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/id'
            Method: get
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetAllProductsByCategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-product-get-all-by-category
      Handler: >-
        Products.Application::Products.Application.Function::GetAllProductsByCategory
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products'
            Method: get
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetAllProductsByTag:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-product-get-all-by-tag
      Handler: >-
        Products.Application::Products.Application.Function::GetAllProductsByTag
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/tag'
            Method: get
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  CreateCategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-category-create
      Handler: >-
        Products.Application::Products.Application.Function::CreateCategory
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/category'
            Method: post        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  UpdateCategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-category-update
      Handler: >-
        Products.Application::Products.Application.Function::UpdateCategory
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/category'
            Method: put        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  DeleteCategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-category-delte
      Handler: >-
        Products.Application::Products.Application.Function::DeleteCategory
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/category'
            Method: delete        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetAllCategories:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-category-get-all
      Handler: >-
        Products.Application::Products.Application.Function::GetAllCategories
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/category/all'
            Method: get
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetCategoryByGame:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-category-get-by-games
      Handler: >-
        Products.Application::Products.Application.Function::GetCategoryByGame
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/category/game'
            Method: get
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetCategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-category-get
      Handler: >-
        Products.Application::Products.Application.Function::GetCategory
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/category'
            Method: get
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  CreateTag:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-tags-create
      Handler: >-
        Products.Application::Products.Application.Function::CreateTag
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/tags'
            Method: post        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetTags:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-tags-get-all
      Handler: >-
        Products.Application::Products.Application.Function::GetTags
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/tags'
            Method: get
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  CreateVariants:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-variants-create
      Handler: >-
        Products.Application::Products.Application.Function::CreateVariants
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/variants'
            Method: post        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetVariants:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-variants-get-all
      Handler: >-
        Products.Application::Products.Application.Function::GetVariants
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/variants'
            Method: get        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetAllServersVariants:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-variants-servers-get-all
      Handler: >-
        Products.Application::Products.Application.Function::GetAllServersVariants
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/variants/servers'
            Method: get        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  CreateCustomize:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-customize-create
      Handler: >-
        Products.Application::Products.Application.Function::CreateCustomize
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/customize'
            Method: post        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  UpdateCustomizes:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-customize-update
      Handler: >-
        Products.Application::Products.Application.Function::UpdateCustomizes
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/customize'
            Method: put        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetCustomizesByFilters:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-customize-get-by-filters
      Handler: >-
        Products.Application::Products.Application.Function::GetCustomizesByFilters
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/customize/filters'
            Method: get        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  DeleteCustomizes:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-customize-delete
      Handler: >-
        Products.Application::Products.Application.Function::DeleteCustomizes
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/customize'
            Method: delete        
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetAllGames:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-games-get-all
      Handler: >-
        Products.Application::Products.Application.Function::GetAllGames
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Products.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/products/games/all'
            Method: get  
      Environment:
        Variables:
          AWS_S3_Bucket: !FindInMap 
            - EnvironmentVariablesMap
            - Function.Properties.Products.Bucket
            - !Ref EnvironmentType
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
